# ワークフローの名前
name: Release

# ワークフローが実行されるトリガーを指定
on:
  push:
    # 'v'で始まるタグ（例: v1.0, v1.2.3）がプッシュされた時のみ実行
    tags:
      - 'v*'

# 実行される一連のジョブを定義
jobs:
  # 'build-and-release' という名前の単一ジョブを定義
  build-and-release:
    # すべてのビルドを単一のUbuntuランナーで実行
    runs-on: ubuntu-latest

    # ジョブ内の一連のステップを定義
    steps:
      # ステップ1: リポジトリのコードをチェックアウトする
      - name: Checkout code
        uses: actions/checkout@v4

      # ステップ2: Rustのツールチェーンをセットアップする
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # ステップ3: Cargoのビルドキャッシュを設定する
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      # ステップ4: クロスコンパイルツール 'cross' をインストール
      # crates.io から特定のバージョンをインストールする
      - name: Install cross
        run: cargo install cross --version 0.2.5

      # ステップ5: Linux と Windows 向けにビルド
      # crossコマンドがターゲットに合ったDockerイメージを自動で利用する
      - name: Build for all targets
        run: |
          cross build --release --target x86_64-unknown-linux-gnu
          cross build --release --target x86_64-pc-windows-gnu

      # ステップ6: リリース用のアセットを準備する
      # 各ターゲットの実行ファイルを個別にzipアーカイブする
      - name: Prepare release assets
        shell: bash
        run: |
          set -e # エラーが発生したら即座にスクリプトを終了する
          
          PROJECT_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')
          
          # cargo metadataからパッケージ名とバイナリ（実行ファイル）名を取得
          METADATA=$(cargo metadata --no-deps --format-version 1)
          PACKAGE_NAME=$(echo "${METADATA}" | jq -r '.packages[0].name')
          EXECUTABLE_NAME=$(echo "${METADATA}" | jq -r '.packages[0].targets[] | select(.kind[] | contains("bin")) | .name' | head -n 1)

          # Linux用アセットの準備
          LINUX_TARGET="x86_64-unknown-linux-gnu"
          LINUX_EXECUTABLE_PATH="target/${LINUX_TARGET}/release/${EXECUTABLE_NAME}"
          LINUX_ARCHIVE_NAME="${PACKAGE_NAME}-${TAG_NAME}-linux-x64.zip"
          zip "${LINUX_ARCHIVE_NAME}" "${LINUX_EXECUTABLE_PATH}"
          
          # Windows用アセットの準備 (GNUターゲット)
          WINDOWS_TARGET="x86_64-pc-windows-gnu"
          WINDOWS_EXECUTABLE_PATH="target/${WINDOWS_TARGET}/release/${EXECUTABLE_NAME}.exe"
          WINDOWS_ARCHIVE_NAME="${PACKAGE_NAME}-${TAG_NAME}-windows-x64.zip"
          zip "${WINDOWS_ARCHIVE_NAME}" "${WINDOWS_EXECUTABLE_PATH}"
          
          # 後続のステップで使えるようにアーカイブ名を環境変数に設定
          echo "LINUX_ARCHIVE=${LINUX_ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "WINDOWS_ARCHIVE=${WINDOWS_ARCHIVE_NAME}" >> $GITHUB_ENV

      # ステップ7: GitHub Releaseを作成し、zipファイルをアップロードする
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # 前のステップで作成した両方のzipファイルをアップロード
          files: |
            ${{ env.LINUX_ARCHIVE }}
            ${{ env.WINDOWS_ARCHIVE }}
